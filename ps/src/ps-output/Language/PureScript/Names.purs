-- File auto generated by purescript-bridge! --
module Language.PureScript.Names where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, String)

import Prelude
import Data.Generic (class Generic)

data Ident =
    Ident String
  | GenIdent (Maybe String) Int

derive instance genericIdent :: Generic Ident


--------------------------------------------------------------------------------
_Ident :: Prism' Ident String
_Ident = prism' Ident f
  where
    f (Ident a) = Just $ a
    f _ = Nothing

_GenIdent :: Prism' Ident { a :: Maybe String, b :: Int }
_GenIdent = prism' (\{ a, b } -> GenIdent a b) f
  where
    f (GenIdent a b) = Just $ { a: a, b: b }
    f _ = Nothing

--------------------------------------------------------------------------------
data Qualified a =
    Qualified (Maybe ModuleName) a

derive instance genericQualified :: Generic a => Generic (Qualified a)


--------------------------------------------------------------------------------
_Qualified :: forall a. Prism' (Qualified a) { a :: Maybe ModuleName, b :: a }
_Qualified = prism' (\{ a, b } -> Qualified a b) f
  where
    f (Qualified a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
newtype ModuleName =
    ModuleName (Array (ProperName Namespace))

derive instance genericModuleName :: Generic ModuleName

derive instance newtypeModuleName :: Newtype ModuleName _


--------------------------------------------------------------------------------
_ModuleName :: Iso' ModuleName (Array (ProperName Namespace))
_ModuleName = _Newtype
--------------------------------------------------------------------------------
newtype ProperName a =
    ProperName {
      runProperName :: String
    }

derive instance genericProperName :: Generic (ProperName a)

derive instance newtypeProperName :: Newtype (ProperName a) _


--------------------------------------------------------------------------------
_ProperName :: forall a. Iso' (ProperName a) { runProperName :: String}
_ProperName = _Newtype

--------------------------------------------------------------------------------
newtype OpName a =
    OpName {
      runOpName :: String
    }

derive instance genericOpName :: Generic (OpName a)

derive instance newtypeOpName :: Newtype (OpName a) _


--------------------------------------------------------------------------------
_OpName :: forall a. Iso' (OpName a) { runOpName :: String}
_OpName = _Newtype

--------------------------------------------------------------------------------
data TypeName =
    DKTypeName

derive instance genericTypeName :: Generic TypeName


--------------------------------------------------------------------------------
_DKTypeName :: Prism' TypeName Unit
_DKTypeName = prism' (\_ -> DKTypeName) f
  where
    f DKTypeName = Just unit

--------------------------------------------------------------------------------
data ConstructorName =
    DKConstructorName

derive instance genericConstructorName :: Generic ConstructorName


--------------------------------------------------------------------------------
_DKConstructorName :: Prism' ConstructorName Unit
_DKConstructorName = prism' (\_ -> DKConstructorName) f
  where
    f DKConstructorName = Just unit

--------------------------------------------------------------------------------
data ClassName =
    DKClassName

derive instance genericClassName :: Generic ClassName


--------------------------------------------------------------------------------
_DKClassName :: Prism' ClassName Unit
_DKClassName = prism' (\_ -> DKClassName) f
  where
    f DKClassName = Just unit

--------------------------------------------------------------------------------
data KindName =
    DKKindName

derive instance genericKindName :: Generic KindName


--------------------------------------------------------------------------------
_DKKindName :: Prism' KindName Unit
_DKKindName = prism' (\_ -> DKKindName) f
  where
    f DKKindName = Just unit

--------------------------------------------------------------------------------
data Namespace =
    DKNamespace

derive instance genericNamespace :: Generic Namespace


--------------------------------------------------------------------------------
_DKNamespace :: Prism' Namespace Unit
_DKNamespace = prism' (\_ -> DKNamespace) f
  where
    f DKNamespace = Just unit

--------------------------------------------------------------------------------
data ValueOpName =
    DKValueOpName

derive instance genericValueOpName :: Generic ValueOpName


--------------------------------------------------------------------------------
_DKValueOpName :: Prism' ValueOpName Unit
_DKValueOpName = prism' (\_ -> DKValueOpName) f
  where
    f DKValueOpName = Just unit

--------------------------------------------------------------------------------
data TypeOpName =
    DKTypeOpName

derive instance genericTypeOpName :: Generic TypeOpName


--------------------------------------------------------------------------------
_DKTypeOpName :: Prism' TypeOpName Unit
_DKTypeOpName = prism' (\_ -> DKTypeOpName) f
  where
    f DKTypeOpName = Just unit

--------------------------------------------------------------------------------
